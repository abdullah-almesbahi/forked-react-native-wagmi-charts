{"version":3,"sources":["usePrice.ts"],"names":["useLineChartPrice","format","precision","index","currentIndex","data","float","value","price","Math","min","length","toFixed","toString","formatted","formattedPrice"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEO,SAASA,iBAAT,CAA2B;AAChCC,EAAAA,MADgC;AAEhCC,EAAAA,SAAS,GAAG,CAFoB;AAGhCC,EAAAA;AAHgC,IAIyC,EAJpE,EAIwE;AAC7E,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAyB,iCAA/B;AAEA,QAAMC,KAAK,GAAG,4CAAgB,MAAM;AAClC,QACE,CAAC,OAAOF,YAAY,CAACG,KAApB,KAA8B,WAA9B,IACCH,YAAY,CAACG,KAAb,KAAuB,CAAC,CAD1B,KAEAJ,KAAK,IAAI,IAHX,EAKE,OAAO,EAAP;AACF,QAAIK,KAAK,GAAG,CAAZ;AACAA,IAAAA,KAAK,GAAGH,IAAI,CAACI,IAAI,CAACC,GAAL,CAASP,KAAT,aAASA,KAAT,cAASA,KAAT,GAAkBC,YAAY,CAACG,KAA/B,EAAsCF,IAAI,CAACM,MAAL,GAAc,CAApD,CAAD,CAAJ,CAA6DJ,KAArE;AACA,WAAOC,KAAK,CAACI,OAAN,CAAcV,SAAd,EAAyBW,QAAzB,EAAP;AACD,GAVa,CAAd;AAWA,QAAMC,SAAS,GAAG,4CAAgB,MAAM;AACtC,QAAIP,KAAK,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,KAAP,KAAgB,EAA5B;AACA,UAAMQ,cAAc,GAAGR,KAAK,GAAG,wBAAY;AAAEA,MAAAA;AAAF,KAAZ,CAAH,GAA4B,EAAxD;;AACA,QACE,OAAON,MAAP,IAAiB,WAAjB,IACA,OAAOA,MAAP,IAAiB,UADjB,IAEAM,KAAK,IAAI,EAFT,IAGAQ,cAAc,IAAI,EAJpB,EAKE;AACA,aAAOd,MAAM,CAAC;AAAEM,QAAAA,KAAF;AAASO,QAAAA,SAAS,EAAEC;AAApB,OAAD,CAAb;AACD,KAPD,MAOO;AACL,aAAOA,cAAP;AACD;AACF,GAbiB,CAAlB;AAcA,SAAO;AAAER,IAAAA,KAAK,EAAED,KAAT;AAAgBQ,IAAAA;AAAhB,GAAP;AACD","sourcesContent":["import { useDerivedValue } from 'react-native-reanimated';\n\nimport { formatPrice } from '../../utils';\nimport type { TFormatterFn } from '../candle/types';\nimport { useLineChart } from './useLineChart';\n\nexport function useLineChartPrice({\n  format,\n  precision = 2,\n  index,\n}: { format?: TFormatterFn<string>; precision?: number; index?: number } = {}) {\n  const { currentIndex, data } = useLineChart();\n\n  const float = useDerivedValue(() => {\n    if (\n      (typeof currentIndex.value === 'undefined' ||\n        currentIndex.value === -1) &&\n      index == null\n    )\n      return '';\n    let price = 0;\n    price = data[Math.min(index ?? currentIndex.value, data.length - 1)].value;\n    return price.toFixed(precision).toString();\n  });\n  const formatted = useDerivedValue(() => {\n    let value = float?.value || '';\n    const formattedPrice = value ? formatPrice({ value }) : '';\n    if (\n      typeof format != 'undefined' &&\n      typeof format == 'function' &&\n      value != '' &&\n      formattedPrice != ''\n    ) {\n      return format({ value, formatted: formattedPrice });\n    } else {\n      return formattedPrice;\n    }\n  });\n  return { value: float, formatted };\n}\n"]}